(function($window){"use strict";var modellaExtender,extensionProperties=["parents","children"],extendedFunctions={},sanitizeCallback=modella.utilities.sanitizeCallback;function cleanModelSet(modelSet){var finalArray=[],recordCopy;for(var index in modelSet){recordCopy=modelSet[index].copy();finalArray.push(recordCopy)}return finalArray}function cleanProperties(sanitizedModel){var key;for(var index in extensionProperties){key=extensionProperties[index];delete sanitizedModel[key]}return sanitizedModel}function cleanRelatives(sanitizedModel,model,relativeSet){var key;for(var index in relativeSet){key=relativeSet[index].name;if(model[key]&&Object.prototype.toString.call(model[key])==="[object Array]"){sanitizedModel[key]=cleanModelSet(model[key])}else if(model[key]){sanitizedModel[key]=model[key].copy()}}return sanitizedModel}function stripRelatives(sanitizedModel,relativeSet){var key;for(var index in relativeSet){key=relativeSet[index].name;delete sanitizedModel[key]}return sanitizedModel}function buildDataAppenderCallback(object,key,passedCallback){var localCallback=sanitizeCallback(passedCallback);function callback(data,error){if(data!==null){object[key]=data}localCallback(data,error)}return callback}function setInitialCondition(config,record,$model){if(typeof record.foreignKey!=="undefined"){config.initialId=$model[record.foreignKey]}else{config.initialParentId=$model.id}}function getRelatives(dataConfigArray,$modelObj,passedCallback){var modelExtender=modella.extender,tempConfig,tempCallback,tempRecord;passedCallback=sanitizeCallback(passedCallback);for(var index in dataConfigArray){tempRecord=dataConfigArray[index];tempCallback=buildDataAppenderCallback($modelObj,tempRecord.name,passedCallback);tempConfig=tempRecord.baseConfig;setInitialCondition(tempConfig,tempRecord,$modelObj);modelExtender.init(tempConfig,tempCallback)}}function getRelativesList(model){var key,relativesList={};for(var index in model.parents){key=model.parents[index].name;relativesList[key]=true}for(var index in model.children){key=model.children[index].name;relativesList[key]=true}return relativesList}function findMatchingRecord(id,recordSet){var matchingRecord=null;for(var index in recordSet){if(recordSet[index].id&&recordSet[index].id===id){matchingRecord=recordSet[index];break}}return matchingRecord}function updateRelativeSet(modelArray,updateArray){var matchingRecord=null;for(var index in modelArray){if(!modelArray[index].id){continue}matchingRecord=findMatchingRecord(modelArray[index].id,updateArray);if(matchingRecord!==null){modelArray[index].revise(matchingRecord)}}}function updateRelative(modelObj,updateObj){if(Object.prototype.toString.call(modelObj)==="[object Array]"){updateRelativeSet(modelObj,updateObj)}else{modelObj.revise(updateObj)}}extendedFunctions.getParents=function(passedCallback){getRelatives(this.parents,this,passedCallback)};extendedFunctions.getChildren=function(passedCallback){getRelatives(this.children,this,passedCallback)};extendedFunctions.copy=function(){var sanitizedModel=modella.utilities.cleanModel(this);sanitizedModel=cleanProperties(sanitizedModel);sanitizedModel=cleanRelatives(sanitizedModel,this,this.children);sanitizedModel=cleanRelatives(sanitizedModel,this,this.parents);return sanitizedModel};extendedFunctions.simpleCopy=function(){var sanitizedModel=modella.utilities.cleanModel(this);sanitizedModel=cleanProperties(sanitizedModel);sanitizedModel=stripRelatives(sanitizedModel,this.children);sanitizedModel=stripRelatives(sanitizedModel,this.parents);return sanitizedModel};extendedFunctions.revise=function(updateObj){var relativesList=getRelativesList(this);for(var key in updateObj){if(!relativesList[key]&&this.hasOwnProperty(key)){this[key]=updateObj[key]}else if(relativesList[key]&&this.hasOwnProperty(key)){updateRelative(this[key],updateObj[key])}}};function appendExtendedFunctions($model){for(var key in extendedFunctions){if(extendedFunctions.hasOwnProperty(key)){$model[key]=extendedFunctions[key]}}return $model}function appendExtendedProperties($config,$model){var key,tempValue;for(var index in extensionProperties){key=extensionProperties[index];tempValue=typeof $config[key]!=="undefined"?$config[key]:null;$model[key]=tempValue}return $model}function extendModel($config,$model){$model=appendExtendedProperties($config,$model);$model=appendExtendedFunctions($model);return $model}modellaExtender={init:function(config,callback){var localModella=new modella,sanitizedCallback=sanitizeCallback(callback),localCallback=function($passedModel,$error){var finalModel=$passedModel;if(finalModel&&typeof finalModel[0]==="undefined"){finalModel=extendModel(config,finalModel)}else if(finalModel){for(var index in finalModel){finalModel[index]=extendModel(config,finalModel[index])}}sanitizedCallback(finalModel,$error)};localModella.modelConfig=config;localModella.init(localCallback)}};$window.modella.extender=modellaExtender})(window);