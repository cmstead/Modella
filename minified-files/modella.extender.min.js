(function($window){"use strict";var modellaExtender,extensionProperties=["parents","children"],extendedFunctions={},sanitizeCallback=modella.utilities.sanitizeCallback;function getRelativesList(model){var key,relativesList={},index;model.parents=model.parents?model.parents:[];model.children=model.children?model.children:[];for(index in model.parents){key=model.parents[index].name;relativesList[key]="parent"}for(index in model.children){key=model.children[index].name;relativesList[key]="child"}return relativesList}function findMatchingRecord(id,recordSet){var matchingRecord=null;for(var index in recordSet){if(recordSet[index].id&&recordSet[index].id===id){matchingRecord=recordSet[index];break}}return matchingRecord}function updateRelativeSet(modelArray,updateArray){var matchingRecord=null;for(var index in modelArray){if(!modelArray[index].id){continue}matchingRecord=findMatchingRecord(modelArray[index].id,updateArray);if(matchingRecord!==null){modelArray[index].revise(matchingRecord)}}}function updateRelative(modelObj,updateObj){if(Object.prototype.toString.call(modelObj)==="[object Array]"){updateRelativeSet(modelObj,updateObj)}else{modelObj.revise(updateObj)}}function buildDataAppenderCallback(object,key,passedCallback){var localCallback=sanitizeCallback(passedCallback);function callback(data,error){if(data!==null){object[key]=data}localCallback(object[key],error)}return callback}function getBaseConfig($model,objectType,name){var configLocation=objectType==="parent"?"parents":"children",key,baseConfig;for(key in $model[configLocation]){if(name===$model[configLocation][key].name){baseConfig=$model[configLocation][key].baseConfig}}return baseConfig}function setInitialCondition(config,record,$model){if(typeof record.foreignKey!=="undefined"){config.initialId=$model[record.foreignKey]}else{config.initialParentId=$model.id}}function checkRelativeNeedsInitialization(relativeObject){var needsInitialization=typeof relativeObject==="object";return Object.prototype.toString.call(relativeObject)==="[object Array]"&&!relativeObject.length?false:needsInitialization}function getRelatives(dataConfigArray,$modelObj,passedCallback){var modelExtender=modella.extender,tempConfig,tempCallback,tempRecord;passedCallback=sanitizeCallback(passedCallback);for(var index in dataConfigArray){tempRecord=dataConfigArray[index];tempCallback=buildDataAppenderCallback($modelObj,tempRecord.name,passedCallback);tempConfig=tempRecord.baseConfig;setInitialCondition(tempConfig,tempRecord,$modelObj);modelExtender.init(tempConfig,tempCallback)}}function initializeObject(config,object,callback){config.initialObject=object;modella.extender.init(config,callback)}function initRelative($relativeObject,baseConfig){var callback=function(finalObject){$relativeObject=finalObject},key;if(typeof $relativeObject[0]!=="undefined"){for(key in $relativeObject){callback=buildDataAppenderCallback($relativeObject,key);initializeObject(baseConfig,$relativeObject[key],callback)}}else{initializeObject(baseConfig,$relativeObject,callback)}delete baseConfig.initialObject}function initRelativeObjects($model){var relativesList=getRelativesList($model),key,needsInitialization,baseConfig;for(key in relativesList){needsInitialization=checkRelativeNeedsInitialization($model[key]);if(needsInitialization){baseConfig=getBaseConfig($model,relativesList[key],key);initRelative($model[key],baseConfig)}}}function createSafeModel(model){var safeModel={};for(var key in model){if(model.hasOwnProperty(key)){safeModel[key]=model[key]}}return safeModel}function cleanRelatives(model,relativeType){var safeModel=createSafeModel(model);for(var key in model[relativeType]){var relativeKey=model[relativeType][key].name;delete safeModel[relativeKey]}return safeModel}function extendCopy(model){var originalCopy=model.copy;model.copy=function($model){var amendedModel;$model=$model?$model:this;amendedModel=cleanRelatives($model,"parents");amendedModel=cleanRelatives(amendedModel,"children");delete amendedModel.parents;delete amendedModel.children;delete amendedModel.baseConfig;originalCopy(amendedModel)};return model}extendedFunctions.getParents=function(passedCallback){getRelatives(this.parents,this,passedCallback)};extendedFunctions.getChildren=function(passedCallback){getRelatives(this.children,this,passedCallback)};extendedFunctions.revise=function(updateObj){var relativesList=getRelativesList(this);for(var key in updateObj){if(!relativesList[key]&&this.hasOwnProperty(key)){this[key]=updateObj[key]}else if(relativesList[key]&&this.hasOwnProperty(key)){updateRelative(this[key],updateObj[key])}}};function appendExtendedFunctions($model){for(var key in extendedFunctions){if(extendedFunctions.hasOwnProperty(key)){$model[key]=extendedFunctions[key]}}return $model}function appendExtendedProperties($config,$model){var key,tempValue;for(var index in extensionProperties){key=extensionProperties[index];tempValue=typeof $config[key]!=="undefined"?$config[key]:null;$model[key]=tempValue}return $model}function extendModel($config,$model){$model=appendExtendedProperties($config,$model);$model=appendExtendedFunctions($model);$model=extendCopy($model);return $model}modellaExtender={init:function(config,callback){var localModella=new modella,sanitizedCallback=sanitizeCallback(callback),localCallback=function($passedModel,$error){var finalModel=$passedModel;if(finalModel&&typeof finalModel[0]==="undefined"){finalModel=extendModel(config,finalModel);initRelativeObjects(finalModel)}else if(finalModel){for(var index in finalModel){finalModel[index]=extendModel(config,finalModel[index]);initRelativeObjects(finalModel)}}sanitizedCallback(finalModel,$error)};localModella.modelConfig=config;localModella.init(localCallback)}};$window.modella.extender=modellaExtender})(window);