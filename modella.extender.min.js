!function($window){"use strict";function cleanModelSet(modelSet){var recordCopy,finalArray=[];for(var index in modelSet)recordCopy=modelSet[index].copy(),finalArray.push(recordCopy);return finalArray}function cleanProperties(sanitizedModel){var key;for(var index in extensionProperties)key=extensionProperties[index],delete sanitizedModel[key];return sanitizedModel}function cleanRelatives(sanitizedModel,model,relativeSet){var key;for(var index in relativeSet)key=relativeSet[index].name,model[key]&&"[object Array]"===Object.prototype.toString.call(model[key])?sanitizedModel[key]=cleanModelSet(model[key]):model[key]&&(sanitizedModel[key]=model[key].copy());return sanitizedModel}function stripRelatives(sanitizedModel,relativeSet){var key;for(var index in relativeSet)key=relativeSet[index].name,delete sanitizedModel[key];return sanitizedModel}function buildDataAppenderCallback(object,key,passedCallback){function callback(data,error){null!==data&&(object[key]=data),localCallback(data,error)}var localCallback=sanitizeCallback(passedCallback);return callback}function setInitialCondition(config,record,$model){"undefined"!=typeof record.foreignKey?config.initialId=$model[record.foreignKey]:config.initialParentId=$model.id}function getRelatives(dataConfigArray,$modelObj,passedCallback){var tempConfig,tempCallback,tempRecord,modelExtender=modella.extender;passedCallback=sanitizeCallback(passedCallback);for(var index in dataConfigArray)tempRecord=dataConfigArray[index],tempCallback=buildDataAppenderCallback($modelObj,tempRecord.name,passedCallback),tempConfig=tempRecord.baseConfig,setInitialCondition(tempConfig,tempRecord,$modelObj),modelExtender.init(tempConfig,tempCallback)}function getRelativesList(model){var key,relativesList={};for(var index in model.parents)key=model.parents[index].name,relativesList[key]=!0;for(var index in model.children)key=model.children[index].name,relativesList[key]=!0;return relativesList}function findMatchingRecord(id,recordSet){var matchingRecord=null;for(var index in recordSet)if(recordSet[index].id&&recordSet[index].id===id){matchingRecord=recordSet[index];break}return matchingRecord}function updateRelativeSet(modelArray,updateArray){var matchingRecord=null;for(var index in modelArray)modelArray[index].id&&(matchingRecord=findMatchingRecord(modelArray[index].id,updateArray),null!==matchingRecord&&modelArray[index].revise(matchingRecord))}function updateRelative(modelObj,updateObj){"[object Array]"===Object.prototype.toString.call(modelObj)?updateRelativeSet(modelObj,updateObj):modelObj.revise(updateObj)}function appendExtendedFunctions($model){for(var key in extendedFunctions)extendedFunctions.hasOwnProperty(key)&&($model[key]=extendedFunctions[key]);return $model}function appendExtendedProperties($config,$model){var key,tempValue;for(var index in extensionProperties)key=extensionProperties[index],tempValue="undefined"!=typeof $config[key]?$config[key]:null,$model[key]=tempValue;return $model}function extendModel($config,$model){return $model=appendExtendedProperties($config,$model),$model=appendExtendedFunctions($model)}var modellaExtender,extensionProperties=["parents","children"],extendedFunctions={},sanitizeCallback=modella.utilities.sanitizeCallback;extendedFunctions.getParents=function(passedCallback){getRelatives(this.parents,this,passedCallback)},extendedFunctions.getChildren=function(passedCallback){getRelatives(this.children,this,passedCallback)},extendedFunctions.copy=function(){var sanitizedModel=modella.utilities.cleanModel(this);return sanitizedModel=cleanProperties(sanitizedModel),sanitizedModel=cleanRelatives(sanitizedModel,this,this.children),sanitizedModel=cleanRelatives(sanitizedModel,this,this.parents)},extendedFunctions.simpleCopy=function(){var sanitizedModel=modella.utilities.cleanModel(this);return sanitizedModel=cleanProperties(sanitizedModel),sanitizedModel=stripRelatives(sanitizedModel,this.children),sanitizedModel=stripRelatives(sanitizedModel,this.parents)},extendedFunctions.revise=function(updateObj){var relativesList=getRelativesList(this);for(var key in updateObj)!relativesList[key]&&this.hasOwnProperty(key)?this[key]=updateObj[key]:relativesList[key]&&this.hasOwnProperty(key)&&updateRelative(this[key],updateObj[key])},modellaExtender={init:function(config,callback){var localModella=new modella,sanitizedCallback=sanitizeCallback(callback),localCallback=function($passedModel,$error){var finalModel=$passedModel;if(finalModel&&"undefined"==typeof finalModel[0])finalModel=extendModel(config,finalModel);else if(finalModel)for(var index in finalModel)finalModel[index]=extendModel(config,finalModel[index]);sanitizedCallback(finalModel,$error)};localModella.modelConfig=config,localModella.init(localCallback)}},$window.modella.extender=modellaExtender}(window);