!function($window){"use strict";var sanitizeCallback=function(callback){return"function"==typeof callback?callback:function(){}},sanitizeInterceptor=function(interceptor){return"undefined"!=typeof interceptor?interceptor:function(model){return model}},cleanModel=function(model){var $modelStr=JSON.stringify(model);return JSON.parse($modelStr)},modelBuilder={saveRecord:function(){return function(callback){var passedCallback=sanitizeCallback(callback);this.id?this.updateRecord(passedCallback):this.createRecord(passedCallback)}},createRecord:function(modelConfig){var postBehavior=modelConfig.service.post,interceptor=sanitizeInterceptor(modelConfig.beforeCreate);return function(callback){var $this=this,passedCallback=sanitizeCallback(callback),$model=cleanModel(this),localCallback=function(id,error){null!==id?($this.id=id,passedCallback(model)):passedCallback(null,error)};$model=interceptor($model),postBehavior($model,localCallback)}},updateRecord:function(modelConfig){var putBehavior=modelConfig.service.put,interceptor=sanitizeInterceptor(modelConfig.beforeUpdate);return function(callback){var $model=cleanModel(this),passedCallback=sanitizeCallback(callback),localCallback=function(data,error){null!==data?passedCallback(model):passedCallback(null,error)};$model=interceptor($model),putBehavior($model,localCallback)}},deleteRecord:function(modelConfig){var deleteBehavior=modelConfig.service.delete,interceptor=sanitizeInterceptor(modelConfig.beforeDelete);return function(callback){var $model=cleanModel(this),passedCallback=sanitizeCallback(callback),localCallback=function(data,error){null!==data?passedCallback(model):passedCallback(null,error)};$model=interceptor($model),deleteBehavior($model,localCallback)}},revise:function(){return function(updateObj){for(var key in this)this.hasOwnProperty(key)&&"function"!=typeof this[key]&&(this[key]="undefined"!=typeof updateObj[key]?updateObj[key]:this[key])}},copy:function(){return function(){return cleanModel(this)}}},Modella=function(){};Modella.prototype={modelConfig:{},createInstance:function(config){var sanitizedConfig="undefined"!=typeof config?config:{},$modellaObject=Object.create(this);return $modellaObject.modelConfig=sanitizedConfig,$modellaObject},init:function(callback){var passedCallback=(this.modelConfig,sanitizeCallback(callback)),localCallback=function(dataObject,error){passedCallback(dataObject,error)};"undefined"!=typeof this.modelConfig.initialObject?this.initByObject(this.modelConfig.initialObject,localCallback):"undefined"!=typeof this.modelConfig.initialId?this.initById(this.modelConfig.initialId,localCallback):"undefined"!=typeof this.modelConfig.initialParentId?this.initByParentId(this.modelConfig.initialParentId,localCallback):"undefined"!=typeof this.modelConfig.initialIds?this.initByIds(this.modelConfig.initialIds,localCallback):passedCallback(null,Error("Unable to initialize model."))},initByObject:function(modelObject,callback){var passedCallback=sanitizeCallback(callback),localCallback=function(model){passedCallback(model)};this.initModel(modelObject,localCallback)},initById:function(id,callback){var $this=this,passedCallback=sanitizeCallback(callback),localCallback=function(dataObject,error){null!==dataObject?$this.initByObject(dataObject,passedCallback):passedCallback(null,error)};this.modelConfig.service.get(id,localCallback)},initByIds:function(idSet,callback){for(var $this=this,index=-1,finalModelSet=[],passedCallback=sanitizeCallback(callback),pushModel=function(model){finalModelSet.push(model)},localCallback=function(model,error){null!==model?$this.initByObject(model,pushModel):null!==finalModelSet&&(finalModelSet=null,passedCallback(null,error)),null!==finalModelSet&&finalModelSet.length===idSet.length&&passedCallback(finalModelSet)};"undefined"!=typeof idSet[++index];)this.modelConfig.service.get(idSet[index],localCallback)},initByParentId:function(parentId,callback){var $this=this,finalModelSet=[],passedCallback=sanitizeCallback(callback),pushModel=function(model){finalModelSet.push(model)},prepareModelSet=function(dataSet){for(var index=-1;"undefined"!=typeof dataSet[++index];)$this.initByObject(dataSet[index],pushModel)},localCallback=function(modelSet,error){null!==modelSet?(prepareModelSet(modelSet),passedCallback(finalModelSet)):passedCallback(null,error)};this.modelConfig.service.getByParentId(parentId,localCallback)},initModel:function(modelObject,callback){var passedCallback=sanitizeCallback(callback);for(var key in modelBuilder)modelBuilder.hasOwnProperty(key)&&(modelObject[key]=modelBuilder[key](this.modelConfig));passedCallback(modelObject)}},$window.modella=Modella,$window.modella.utilities={sanitizeCallback:sanitizeCallback,sanitizeInterceptor:sanitizeInterceptor,cleanModel:cleanModel}}(window);
!function($window){"use strict";function cleanModelSet(modelSet){var recordCopy,finalArray=[];for(var index in modelSet)recordCopy=modelSet[index].copy(),finalArray.push(recordCopy);return finalArray}function cleanProperties(sanitizedModel){var key;for(var index in extensionProperties)key=extensionProperties[index],delete sanitizedModel[key];return sanitizedModel}function cleanRelatives(sanitizedModel,model,relativeSet){var key;for(var index in relativeSet)key=relativeSet[index].name,model[key]&&"[object Array]"===Object.prototype.toString.call(model[key])?sanitizedModel[key]=cleanModelSet(model[key]):model[key]&&(sanitizedModel[key]=model[key].copy());return sanitizedModel}function stripRelatives(sanitizedModel,relativeSet){var key;for(var index in relativeSet)key=relativeSet[index].name,delete sanitizedModel[key];return sanitizedModel}function getRelativesList(model){var key,relativesList={};for(var index in model.parents)key=model.parents[index].name,relativesList[key]="parent";for(var index in model.children)key=model.children[index].name,relativesList[key]="child";return relativesList}function findMatchingRecord(id,recordSet){var matchingRecord=null;for(var index in recordSet)if(recordSet[index].id&&recordSet[index].id===id){matchingRecord=recordSet[index];break}return matchingRecord}function updateRelativeSet(modelArray,updateArray){var matchingRecord=null;for(var index in modelArray)modelArray[index].id&&(matchingRecord=findMatchingRecord(modelArray[index].id,updateArray),null!==matchingRecord&&modelArray[index].revise(matchingRecord))}function updateRelative(modelObj,updateObj){"[object Array]"===Object.prototype.toString.call(modelObj)?updateRelativeSet(modelObj,updateObj):modelObj.revise(updateObj)}function buildDataAppenderCallback(object,key,passedCallback){function callback(data,error){null!==data&&(object[key]=data),localCallback(data,error)}var localCallback=sanitizeCallback(passedCallback);return callback}function getBaseConfig($model,objectType,name){var key,baseConfig,configLocation="parent"===objectType?"parents":"children";for(key in $model[configLocation])name===$model[configLocation][key].name&&(baseConfig=$model[configLocation][key]);return baseConfig}function setInitialCondition(config,record,$model){"undefined"!=typeof record.foreignKey?config.initialId=$model[record.foreignKey]:config.initialParentId=$model.id}function checkRelativeNeedsInitialization(relativeObject){var needsInitialization="object"==typeof relativeObject;return"[object Array]"!==Object.prototype.toString.call(relativeObject)||relativeObject.length?needsInitialization:!1}function getRelatives(dataConfigArray,$modelObj,passedCallback){var tempConfig,tempCallback,tempRecord,modelExtender=modella.extender;passedCallback=sanitizeCallback(passedCallback);for(var index in dataConfigArray)tempRecord=dataConfigArray[index],tempCallback=buildDataAppenderCallback($modelObj,tempRecord.name,passedCallback),tempConfig=tempRecord.baseConfig,setInitialCondition(tempConfig,tempRecord,$modelObj),modelExtender.init(tempConfig,tempCallback)}function initializeObject(config,object,callback){config.initialObject=object,modella.extender.init(config,callback)}function initRelative($relativeObject,baseConfig){var key,callback=function(finalObject){$relativeObject=finalObject};if("undefined"!=typeof $relativeObject[0])for(key in $relativeObject)callback=buildDataAppenderCallback($relativeObject,key),initializeObject(baseConfig,$relativeObject[key],callback);else initializeObject(baseConfig,$relativeObject,callback);delete baseConfig.initialObject}function initRelativeObjects($model){var key,needsInitialization,baseConfig,relativesList=getRelativesList($model);for(key in relativesList)needsInitialization=checkRelativeNeedsInitialization($model[key]),needsInitialization&&(baseConfig=getBaseConfig($model,relativesList[key],key),initRelative($model[key],baseConfig))}function appendExtendedFunctions($model){for(var key in extendedFunctions)extendedFunctions.hasOwnProperty(key)&&($model[key]=extendedFunctions[key]);return $model}function appendExtendedProperties($config,$model){var key,tempValue;for(var index in extensionProperties)key=extensionProperties[index],tempValue="undefined"!=typeof $config[key]?$config[key]:null,$model[key]=tempValue;return $model}function extendModel($config,$model){return $model=appendExtendedProperties($config,$model),$model=appendExtendedFunctions($model)}var modellaExtender,extensionProperties=["parents","children"],extendedFunctions={},sanitizeCallback=modella.utilities.sanitizeCallback;extendedFunctions.getParents=function(passedCallback){getRelatives(this.parents,this,passedCallback)},extendedFunctions.getChildren=function(passedCallback){getRelatives(this.children,this,passedCallback)},extendedFunctions.copy=function(){var sanitizedModel=modella.utilities.cleanModel(this);return sanitizedModel=cleanProperties(sanitizedModel),sanitizedModel=cleanRelatives(sanitizedModel,this,this.children),sanitizedModel=cleanRelatives(sanitizedModel,this,this.parents)},extendedFunctions.simpleCopy=function(){var sanitizedModel=modella.utilities.cleanModel(this);return sanitizedModel=cleanProperties(sanitizedModel),sanitizedModel=stripRelatives(sanitizedModel,this.children),sanitizedModel=stripRelatives(sanitizedModel,this.parents)},extendedFunctions.revise=function(updateObj){var relativesList=getRelativesList(this);for(var key in updateObj)!relativesList[key]&&this.hasOwnProperty(key)?this[key]=updateObj[key]:relativesList[key]&&this.hasOwnProperty(key)&&updateRelative(this[key],updateObj[key])},modellaExtender={init:function(config,callback){var localModella=new modella,sanitizedCallback=sanitizeCallback(callback),localCallback=function($passedModel,$error){var finalModel=$passedModel;if(finalModel&&"undefined"==typeof finalModel[0])finalModel=extendModel(config,finalModel),initRelativeObjects(finalModel);else if(finalModel)for(var index in finalModel)finalModel[index]=extendModel(config,finalModel[index]),initRelativeObjects(finalModel);sanitizedCallback(finalModel,$error)};localModella.modelConfig=config,localModella.init(localCallback)}},$window.modella.extender=modellaExtender}(window);
